// This file is automatically generated by running `cargo run -p antlr_codegen`.
//
// =====================
// Do not edit manually.
// =====================
//
#![allow(dead_code)]
#![allow(unused_imports)]

//! This module contains an auto-generated VUE parser.
use crate::syntax_kind::*;
use code_grammar::{catch, tokenset, Parser, TokenSet};
use code_grammar::parser::Continue;

pub fn component(p: &mut Parser) -> Option<Continue> {
    let _marker = p.start();
    let _ok = catch!({
        while p.at_ts(&tokenset![COMMENT, L_ANGLE, TEXT, WHITESPACE]) {
            let _checkpoint = p.checkpoint_ambiguous();
            component_pattern(p);
            if !p.commit(_checkpoint)?.is_ok() {
                break;
            }
        }
        p.expect(EOF)?;
        Some(Continue)
    });
    p.complete(_marker, COMPONENT);
    _ok
}

pub fn component_pattern(p: &mut Parser) -> Option<Continue> {
    if p.at(L_ANGLE) && {
        // try --> component_template
        let mut _checkpoint = p.checkpoint(true);
        component_template(p);
        p.commit(_checkpoint)?.is_ok()
    } {
        // ok
    } else if p.at(L_ANGLE) && {
        // try --> component_script
        let mut _checkpoint = p.checkpoint(true);
        component_script(p);
        p.commit(_checkpoint)?.is_ok()
    } {
        // ok
    } else if p.at(L_ANGLE) {
        component_style(p)?;
    } else if p.at_ts(&tokenset![COMMENT, TEXT, WHITESPACE]) {
        html_misc(p)?;
    } else {
        // otherwise, emit an error
        p.expected_ts_in("component_pattern", &tokenset![COMMENT, L_ANGLE, TEXT, WHITESPACE])?;
    }
    Some(Continue)
}

pub fn component_template(p: &mut Parser) -> Option<Continue> {
    let _marker = p.start();
    let _ok = catch!({
        p.expect(L_ANGLE)?;
        template_tag(p)?;
        p.eat(WS);
        while p.at_ts(&tokenset![AT, COLON, TAG_NAME]) {
            let _checkpoint = p.checkpoint_ambiguous();
            catch!({
                attribute(p)?;
                p.eat(WS);
                Some(Continue)
            });
            if !p.commit(_checkpoint)?.is_ok() {
                break;
            }
        }
        p.expect(R_ANGLE)?;
        template_content(p)?;
        if p.at(L_ANGLE) {
            p.bump();
            p.expect(SLASH)?;
        } else if p.at(L_ANGLE_SLASH) {
            p.bump();
        } else {
            p.expected_ts_in("component_template", &tokenset![L_ANGLE, L_ANGLE_SLASH])?;
        }
        p.eat(WS);
        template_tag(p)?;
        p.eat(WS);
        p.expect(R_ANGLE)?;
        Some(Continue)
    });
    p.complete(_marker, COMPONENT_TEMPLATE);
    _ok
}

pub fn component_script(p: &mut Parser) -> Option<Continue> {
    let _marker = p.start();
    let _ok = catch!({
        p.expect(L_ANGLE)?;
        script_tag(p)?;
        p.eat(WS);
        while p.at_ts(&tokenset![AT, COLON, TAG_NAME]) {
            let _checkpoint = p.checkpoint_ambiguous();
            catch!({
                attribute(p)?;
                p.eat(WS);
                Some(Continue)
            });
            if !p.commit(_checkpoint)?.is_ok() {
                break;
            }
        }
        p.expect(R_ANGLE)?;
        if p.at(SCRIPT_CONTENT) {
            script_block(p)?;
        }
        if p.at(L_ANGLE) {
            p.bump();
            p.expect(SLASH)?;
        } else if p.at(L_ANGLE_SLASH) {
            p.bump();
        } else {
            p.expected_ts_in("component_script", &tokenset![L_ANGLE, L_ANGLE_SLASH])?;
        }
        p.eat(WS);
        script_tag(p)?;
        p.eat(WS);
        p.expect(R_ANGLE)?;
        Some(Continue)
    });
    p.complete(_marker, COMPONENT_SCRIPT);
    _ok
}

pub fn component_style(p: &mut Parser) -> Option<Continue> {
    let _marker = p.start();
    let _ok = catch!({
        p.expect(L_ANGLE)?;
        style_tag(p)?;
        p.eat(WS);
        while p.at_ts(&tokenset![AT, COLON, TAG_NAME]) {
            let _checkpoint = p.checkpoint_ambiguous();
            catch!({
                attribute(p)?;
                p.eat(WS);
                Some(Continue)
            });
            if !p.commit(_checkpoint)?.is_ok() {
                break;
            }
        }
        p.expect(R_ANGLE)?;
        if p.at(STYLE_CONTENT) {
            style_block(p)?;
        }
        if p.at(L_ANGLE) {
            p.bump();
            p.expect(SLASH)?;
        } else if p.at(L_ANGLE_SLASH) {
            p.bump();
        } else {
            p.expected_ts_in("component_style", &tokenset![L_ANGLE, L_ANGLE_SLASH])?;
        }
        p.eat(WS);
        style_tag(p)?;
        p.eat(WS);
        p.expect(R_ANGLE)?;
        Some(Continue)
    });
    p.complete(_marker, COMPONENT_STYLE);
    _ok
}

pub fn template_tag(p: &mut Parser) -> Option<Continue> {
    if !(p.at_contextual_kw("template")) {
        p.error("expected to be at keyword 'template'")?;
    }
    p.expect(TAG_NAME)?;
    Some(Continue)
}

pub fn script_tag(p: &mut Parser) -> Option<Continue> {
    if !(p.at_contextual_kw("script")) {
        p.error("expected to be at keyword 'script'")?;
    }
    p.expect(TAG_NAME)?;
    Some(Continue)
}

pub fn style_tag(p: &mut Parser) -> Option<Continue> {
    if !(p.at_contextual_kw("style")) {
        p.error("expected to be at keyword 'style'")?;
    }
    p.expect(TAG_NAME)?;
    Some(Continue)
}

pub fn template_content(p: &mut Parser) -> Option<Continue> {
    if p.at_ts(&tokenset![TEXT, WHITESPACE]) {
        html_chardata(p)?;
    }
    while p.at_ts(&tokenset![COMMENT, L_ANGLE, MUSTACHE]) {
        let _checkpoint = p.checkpoint_ambiguous();
        catch!({
            if p.at(L_ANGLE) {
                element(p)?;
            } else if p.at(MUSTACHE) {
                p.bump();
            } else if p.at(COMMENT) {
                p.bump();
            }
            if p.at_ts(&tokenset![TEXT, WHITESPACE]) {
                html_chardata(p)?;
            }
            Some(Continue)
        });
        if !p.commit(_checkpoint)?.is_ok() {
            break;
        }
    }
    Some(Continue)
}

pub fn html_content(p: &mut Parser) -> Option<Continue> {
    if p.at_ts(&tokenset![COMMENT, L_ANGLE, MUSTACHE, TEXT, WHITESPACE]) {
        if p.at_ts(&tokenset![TEXT, WHITESPACE]) {
            html_chardata(p)?;
        }
        while p.at_ts(&tokenset![COMMENT, L_ANGLE, MUSTACHE]) {
            let _checkpoint = p.checkpoint_ambiguous();
            catch!({
                if p.at(L_ANGLE) {
                    element(p)?;
                } else if p.at(MUSTACHE) {
                    p.bump();
                } else if p.at(COMMENT) {
                    p.bump();
                }
                if p.at_ts(&tokenset![TEXT, WHITESPACE]) {
                    html_chardata(p)?;
                }
                Some(Continue)
            });
            if !p.commit(_checkpoint)?.is_ok() {
                break;
            }
        }
    } else if p.at(SCRIPT_CONTENT) {
        if p.at(SCRIPT_CONTENT) {
            script_block(p)?;
        }
    } else if p.at(STYLE_CONTENT) {
        if p.at(STYLE_CONTENT) {
            style_block(p)?;
        }
    }
    Some(Continue)
}

pub fn attribute(p: &mut Parser) -> Option<Continue> {
    if (p.at(COLON) || (p.at_contextual_kw("v-bind") && p.at(TAG_NAME))) && {
        // try --> ({ <predicate> }? TAG_NAME)? : attribute_key (attribute_modifier)* ((WS)? = (WS)? attribute_value)? #ATTRIBUTE_BINDING
        let mut _checkpoint = p.checkpoint(true);
        catch!({
            let _marker = p.start();
            let _ok = catch!({
                if p.at_contextual_kw("v-bind") && p.at(TAG_NAME) {
                    p.bump();
                }
                p.expect(COLON)?;
                attribute_key(p)?;
                while p.at(DOT) {
                    let _checkpoint = p.checkpoint_ambiguous();
                    attribute_modifier(p);
                    if !p.commit(_checkpoint)?.is_ok() {
                        break;
                    }
                }
                if p.at_ts(&tokenset![EQ, WS]) {
                    let mut _checkpoint = p.checkpoint(true);
                    catch!({
                        p.eat(WS);
                        p.expect(EQ)?;
                        p.eat(WS);
                        attribute_value(p)?;
                        Some(Continue)
                    });
                    p.commit(_checkpoint)?.ok();
                }
                Some(Continue)
            });
            p.complete(_marker, ATTRIBUTE_BINDING);
            if _ok.is_none() {
                return None;
            }
            Some(Continue)
        });
        p.commit(_checkpoint)?.is_ok()
    } {
        // ok
    } else if (p.at(AT) || (p.at_contextual_kw("v-on") && p.at(TAG_NAME))) && {
        // try --> ({ <predicate> }? TAG_NAME | @) attribute_key (attribute_modifier)* ((WS)? = (WS)? attribute_value)? #ATTRIBUTE_LISTENER
        let mut _checkpoint = p.checkpoint(true);
        catch!({
            let _marker = p.start();
            let _ok = catch!({
                if p.at_contextual_kw("v-on") && p.at(TAG_NAME) {
                    p.bump();
                } else if p.at(AT) {
                    p.bump();
                }
                attribute_key(p)?;
                while p.at(DOT) {
                    let _checkpoint = p.checkpoint_ambiguous();
                    attribute_modifier(p);
                    if !p.commit(_checkpoint)?.is_ok() {
                        break;
                    }
                }
                if p.at_ts(&tokenset![EQ, WS]) {
                    let mut _checkpoint = p.checkpoint(true);
                    catch!({
                        p.eat(WS);
                        p.expect(EQ)?;
                        p.eat(WS);
                        attribute_value(p)?;
                        Some(Continue)
                    });
                    p.commit(_checkpoint)?.ok();
                }
                Some(Continue)
            });
            p.complete(_marker, ATTRIBUTE_LISTENER);
            if _ok.is_none() {
                return None;
            }
            Some(Continue)
        });
        p.commit(_checkpoint)?.is_ok()
    } {
        // ok
    } else if p.at(TAG_NAME) && {
        // try --> TAG_NAME (WS)? = (WS)? attribute_value #ATTRIBUTE
        let mut _checkpoint = p.checkpoint(true);
        catch!({
            let _marker = p.start();
            let _ok = catch!({
                p.bump();
                p.eat(WS);
                p.expect(EQ)?;
                p.eat(WS);
                attribute_value(p)?;
                Some(Continue)
            });
            p.complete(_marker, ATTRIBUTE);
            if _ok.is_none() {
                return None;
            }
            Some(Continue)
        });
        p.commit(_checkpoint)?.is_ok()
    } {
        // ok
    } else if p.at(TAG_NAME) {
        let _marker = p.start();
        p.bump();
        p.complete(_marker, ATTRIBUTE);
    } else {
        // otherwise, emit an error
        p.expected_ts_in("attribute", &tokenset![AT, COLON, TAG_NAME])?;
    }
    Some(Continue)
}

pub fn attribute_modifier(p: &mut Parser) -> Option<Continue> {
    let _marker = p.start();
    let _ok = catch!({
        p.expect(DOT)?;
        p.expect(TAG_NAME)?;
        Some(Continue)
    });
    p.complete(_marker, ATTRIBUTE_MODIFIER);
    _ok
}

pub fn attribute_key(p: &mut Parser) -> Option<Continue> {
    if p.at(L_SQUARE) {
        let _marker = p.start();
        let _ok = catch!({
            p.bump();
            p.eat(WS);
            p.expect(TAG_NAME)?;
            p.eat(WS);
            p.expect(R_SQUARE)?;
            Some(Continue)
        });
        p.complete(_marker, ATTRIBUTE_KEY);
        if _ok.is_none() {
            return None;
        }
    } else if p.at(TAG_NAME) {
        let _marker = p.start();
        p.bump();
        p.complete(_marker, ATTRIBUTE_KEY);
    } else {
        p.expected_ts_in("attribute_key", &tokenset![L_SQUARE, TAG_NAME])?;
    }
    Some(Continue)
}

pub fn element(p: &mut Parser) -> Option<Continue> {
    let _marker = p.start();
    let _ok = element_pattern(p);
    p.complete(_marker, ELEMENT);
    _ok
}

pub fn element_pattern(p: &mut Parser) -> Option<Continue> {
    p.expect(L_ANGLE)?;
    if ((p.at_contextual_kw("area") || p.at_contextual_kw("base") || p.at_contextual_kw("br") || p.at_contextual_kw("col") || p.at_contextual_kw("embed") || p.at_contextual_kw("hr") || p.at_contextual_kw("img") || p.at_contextual_kw("input") || p.at_contextual_kw("link") || p.at_contextual_kw("meta") || p.at_contextual_kw("param") || p.at_contextual_kw("source") || p.at_contextual_kw("track") || p.at_contextual_kw("wbr")) && p.at(TAG_NAME)) && {
        // try --> empty_element_tag_name (WS)? (attribute (WS)?)* (> | />)
        let mut _checkpoint = p.checkpoint(true);
        catch!({
            empty_element_tag_name(p)?;
            p.eat(WS);
            while p.at_ts(&tokenset![AT, COLON, TAG_NAME]) {
                let _checkpoint = p.checkpoint_ambiguous();
                catch!({
                    attribute(p)?;
                    p.eat(WS);
                    Some(Continue)
                });
                if !p.commit(_checkpoint)?.is_ok() {
                    break;
                }
            }
            p.expect_ts(&tokenset![R_ANGLE, SLASH_R_ANGLE])?;
            Some(Continue)
        });
        p.commit(_checkpoint)?.is_ok()
    } {
        // ok
    } else if p.at(TAG_NAME) {
        p.bump();
        p.eat(WS);
        while p.at_ts(&tokenset![AT, COLON, TAG_NAME]) {
            let _checkpoint = p.checkpoint_ambiguous();
            catch!({
                attribute(p)?;
                p.eat(WS);
                Some(Continue)
            });
            if !p.commit(_checkpoint)?.is_ok() {
                break;
            }
        }
        if p.at(SLASH_R_ANGLE) {
            p.bump();
        } else if p.at(R_ANGLE) {
            p.bump();
            html_content(p)?;
            if p.at(L_ANGLE) {
                p.bump();
                p.expect(SLASH)?;
            } else if p.at(L_ANGLE_SLASH) {
                p.bump();
            } else {
                p.expected_ts_in("element_pattern", &tokenset![L_ANGLE, L_ANGLE_SLASH])?;
            }
            p.eat(WS);
            p.expect(TAG_NAME)?;
            p.eat(WS);
            p.expect(R_ANGLE)?;
        } else {
            p.expected_ts_in("element_pattern", &tokenset![R_ANGLE, SLASH_R_ANGLE])?;
        }
    } else {
        // otherwise, emit an error
        p.expected_in("element_pattern", TAG_NAME)?;
    }
    Some(Continue)
}

pub fn empty_element_tag_name(p: &mut Parser) -> Option<Continue> {
    if p.at_contextual_kw("area") && p.at(TAG_NAME) {
        p.bump();
    } else if p.at_contextual_kw("base") && p.at(TAG_NAME) {
        p.bump();
    } else if p.at_contextual_kw("br") && p.at(TAG_NAME) {
        p.bump();
    } else if p.at_contextual_kw("col") && p.at(TAG_NAME) {
        p.bump();
    } else if p.at_contextual_kw("embed") && p.at(TAG_NAME) {
        p.bump();
    } else if p.at_contextual_kw("hr") && p.at(TAG_NAME) {
        p.bump();
    } else if p.at_contextual_kw("img") && p.at(TAG_NAME) {
        p.bump();
    } else if p.at_contextual_kw("input") && p.at(TAG_NAME) {
        p.bump();
    } else if p.at_contextual_kw("link") && p.at(TAG_NAME) {
        p.bump();
    } else if p.at_contextual_kw("meta") && p.at(TAG_NAME) {
        p.bump();
    } else if p.at_contextual_kw("param") && p.at(TAG_NAME) {
        p.bump();
    } else if p.at_contextual_kw("source") && p.at(TAG_NAME) {
        p.bump();
    } else if p.at_contextual_kw("track") && p.at(TAG_NAME) {
        p.bump();
    } else if p.at_contextual_kw("wbr") && p.at(TAG_NAME) {
        p.bump();
    } else {
        // otherwise, emit an error
        p.expected_in("empty_element_tag_name", TAG_NAME)?;
    }
    Some(Continue)
}

pub fn attribute_value(p: &mut Parser) -> Option<Continue> {
    p.expect_ts(&tokenset![QUOTED, TAG_NAME])
}

pub fn html_chardata(p: &mut Parser) -> Option<Continue> {
    p.expect_ts(&tokenset![TEXT, WHITESPACE])
}

pub fn html_misc(p: &mut Parser) -> Option<Continue> {
    p.expect_ts(&tokenset![COMMENT, TEXT, WHITESPACE])
}

pub fn script_block(p: &mut Parser) -> Option<Continue> {
    let _marker = p.start();
    let _ok = p.expect(SCRIPT_CONTENT);
    p.complete(_marker, SCRIPT_BLOCK);
    _ok
}

pub fn style_block(p: &mut Parser) -> Option<Continue> {
    let _marker = p.start();
    let _ok = p.expect(STYLE_CONTENT);
    p.complete(_marker, STYLE_BLOCK);
    _ok
}
